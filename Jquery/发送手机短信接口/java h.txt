package cn.gov.csrc.base.systemmanager.action;  
  
import java.io.IOException;  
import java.io.PrintWriter;  
import java.util.List;  
  
import javax.annotation.Resource;  
import javax.servlet.http.HttpServletResponse;  
  
import org.apache.log4j.Logger;  
import org.apache.struts2.convention.annotation.Action;  
import org.apache.struts2.convention.annotation.Result;  
import org.apache.struts2.convention.annotation.Results;  
import org.springframework.context.annotation.Scope;  
import org.springframework.security.authentication.encoding.MessageDigestPasswordEncoder;  
import org.springframework.security.core.context.SecurityContextHolder;  
import org.springframework.stereotype.Controller;  
  
import cn.gov.csrc.base.action.BaseAction;  
import cn.gov.csrc.base.log.service.LogService;  
import cn.gov.csrc.base.report.util.CommonUtil;  
import cn.gov.csrc.base.report.util.Env;  
import cn.gov.csrc.base.systemmanager.model.Count;  
import cn.gov.csrc.base.systemmanager.model.User;  
import cn.gov.csrc.base.systemmanager.service.CountService;  
import cn.gov.csrc.base.systemmanager.service.UserService;  
import cn.gov.csrc.base.util.WebContextUtil;  
  
import com.sms.webservice.client.SmsReturnObj;  
import com.sms.webservice.client.SmsWebClient;  
/** 
 * File: UserAction.java  
 * Author: jiangsai  
 * Version: 1.1  
 * Date: 04/17/2013  
 * Modify: 
 * Description:用户  
 * Copyright csrc 
 */  
@Controller()  
@Scope("prototype")  
@Results({  
        @Result(name = "success", location = "/statics/report.jsp"),  
        @Result(name = "modifyPassword", location = "/statics/modifyPassword.jsp")  
        })  
public class UserAction extends BaseAction<User> {  
      
    private static final long serialVersionUID = 1214696686677691191L;  
    private static Logger log = Logger.getLogger(UserAction.class);  
    private static final String url = Env.getInstance().getProperty("url");  
    private static final String userName = Env.getInstance().getProperty(  
            "username");  
    private static final String passWord = Env.getInstance().getProperty(  
            "password");  
  
    private Integer id;  
  
    private String username;// 用户名  
  
    private String password;// 密码  
  
    private String passwordRepeat;// 确认密码  
      
    private String jbPhone;//手机号码  
      
    private String jbCredentialsCode;//身份证号码  
      
    private String checkNum;//图片验证码  
  
    private String newPassword;  
  
    private String confirmPassword;  
  
    private Integer[] ownRoleIds;  
  
    private UserService userService;  
      
    private CountService countService;  
      
    private LogService logService;  
      
    private Count count = new Count();  
  
    public Integer getId() {  
        return id;  
    }  
  
    public void setId(Integer id) {  
        this.id = id;  
    }  
  
    public String getUsername() {  
        return username;  
    }  
  
    public void setUsername(String username) {  
        this.username = username;  
    }  
  
    public String getPassword() {  
        return password;  
    }  
  
    public void setPassword(String password) {  
        this.password = password;  
    }  
  
    public String getPasswordRepeat() {  
        return passwordRepeat;  
    }  
  
    public void setPasswordRepeat(String passwordRepeat) {  
        this.passwordRepeat = passwordRepeat;  
    }  
      
    public String getJbPhone() {  
        return jbPhone;  
    }  
  
    public void setJbPhone(String jbPhone) {  
        this.jbPhone = jbPhone;  
    }  
      
    public String getJbCredentialsCode() {  
        return jbCredentialsCode;  
    }  
  
    public void setJbCredentialsCode(String jbCredentialsCode) {  
        this.jbCredentialsCode = jbCredentialsCode;  
    }  
  
    public String getCheckNum() {  
        return checkNum;  
    }  
  
    public void setCheckNum(String checkNum) {  
        this.checkNum = checkNum;  
    }  
  
    public Integer[] getOwnRoleIds() {  
        return ownRoleIds;  
    }  
  
    public void setOwnRoleIds(Integer[] ownRoleIds) {  
        this.ownRoleIds = ownRoleIds;  
    }  
  
    public String getNewPassword() {  
        return newPassword;  
    }  
  
    public void setNewPassword(String newPassword) {  
        this.newPassword = newPassword;  
    }  
  
    public String getConfirmPassword() {  
        return confirmPassword;  
    }  
  
    public void setConfirmPassword(String confirmPassword) {  
        this.confirmPassword = confirmPassword;  
    }  
  
    @Resource  
    public void setUserService(UserService userService) {  
        this.userService = userService;  
    }  
  
    public UserService getUserService() {  
        return userService;  
    }  
  
    @Resource  
    public void setCountService(CountService countService) {  
        this.countService = countService;  
    }  
  
    public CountService getCountService() {  
        return countService;  
    }  
      
    public LogService getLogService() {  
        return logService;  
    }  
  
    @Resource  
    public void setLogService(LogService logService) {  
        this.logService = logService;  
    }  
  
    public Count getCount() {  
        return count;  
    }  
  
    public void setCount(Count count) {  
        this.count = count;  
    }  
  
    public void prepareToUpdatePage() {  
        model = userService.getEntity(id);  
    }  
      
    /** 
     * 用户登录 
     *  
     * @return success 
     */  
    @Action(value = "UserAction_login")  
    public String login() {  
        Object u = SecurityContextHolder.getContext().getAuthentication().getPrincipal();  
        if (u instanceof User && u != null) {  
            WebContextUtil.getSession().setAttribute("user", u);  
            User user = (User)u;  
            //使用数据库表TBL_BASE_LOG添加用户登录的日志信息  
            logService.saveTblBaseLog(WebContextUtil.getRequest(),"当前操作人【"+user.getNickname()+"】登录系统");  
        } else {  
            // 防止绕过登陆页面直接执行Action  
            return "login";  
        }  
        return SUCCESS;  
    }  
      
    /** 
     * 用户密码更新 
     */  
    @Action(value = "UserAction_updateUser")  
    public String updateUser() {  
        if (!newPassword.equals(confirmPassword)) {  
            this.setMessage("新密码与确认密码不一致！");  
            return "modifyPassword";  
        }  
        User u = (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();  
        MessageDigestPasswordEncoder encoder = new MessageDigestPasswordEncoder("md5");  
        String psw = encoder.encodePassword(newPassword, null);  
        userService.modifyPassword(u, psw);  
        this.setMessage("保存成功!");  
        return "modifyPassword";  
    }  
      
    /** 
     * 验证用户名是否存在 
     *  
     * @throws Exception 
     */  
    @Action(value = "UserAction_checkUserName")  
    public void checkUserName(){  
        String result = "0";  
        try {  
            List<User> list = userService.findUserByUserName(username);  
            if(list != null && list.size() > 0){  
                result = "1";  
            }else{  
                result = "0";  
            }  
            HttpServletResponse response = WebContextUtil.getResponse();  
            response.setContentType("application/json;charset=UTF-8");  
            response.setHeader("Cache-Control", "no-cache");  
            PrintWriter out = response.getWriter();  
            out.write(result.toString());  
        } catch (IOException e) {  
            throw new RuntimeException("验证身份证号码出错", e);  
        }  
    }  
  
    /** 
     * 验证原始密码是否正确 
     *  
     * @throws Exception 
     */  
    @Action(value = "UserAction_checkPassWord")  
    public void checkPassWord() throws Exception {  
        String result = "0";  
        MessageDigestPasswordEncoder encoder = new MessageDigestPasswordEncoder("md5");  
        String pwd = encoder.encodePassword(password, null);  
        List<User> user = userService.findUserByPassWord(pwd);  
        if (user != null && user.size() > 0) {  
            result = "1";  
        }else{  
            result = "0";  
        }  
        HttpServletResponse response = WebContextUtil.getResponse();  
        response.setContentType("application/json;charset=UTF-8");  
        response.setHeader("Cache-Control", "no-cache");  
        PrintWriter out = response.getWriter();  
        out.write(result.toString());  
    }  
      
    /** 
     * 验证手机号码是否存在 
     */  
    @Action(value = "UserAction_checkPhone")  
    public void checkPhone(){  
        String result = "0";  
        try {  
            List<User> list = userService.findUserByPhone(jbPhone);  
            if(list != null && list.size() > 0){  
                result = "1";  
            }else{  
                result = "0";  
            }  
            HttpServletResponse response = WebContextUtil.getResponse();  
            response.setContentType("application/json;charset=UTF-8");  
            response.setHeader("Cache-Control", "no-cache");  
            PrintWriter out = response.getWriter();  
            out.write(result.toString());  
        } catch (IOException e) {  
            throw new RuntimeException("验证手机号码出错", e);  
        }  
    }  
      
    /** 
     * 验证身份证号码是否存在 
     */  
    @Action(value = "UserAction_checkCredentialsCode")  
    public void checkCredentialsCode(){  
        String result = "0";  
        try {  
            List<User> list = userService.findUserByCredentialsCode(jbCredentialsCode);  
            if(list != null && list.size() > 0){  
                result = "1";  
            }else{  
                result = "0";  
            }  
            HttpServletResponse response = WebContextUtil.getResponse();  
            response.setContentType("application/json;charset=UTF-8");  
            response.setHeader("Cache-Control", "no-cache");  
            PrintWriter out = response.getWriter();  
            out.write(result.toString());  
        } catch (IOException e) {  
            throw new RuntimeException("验证身份证号码出错", e);  
        }  
    }  
      
    /** 
     * 验证验证码是否正确 
     */  
    @Action(value = "UserAction_checkNum")  
    public void checkNum(){  
        try {  
            String result = "0";  
            String check_number_key = (String)WebContextUtil.getSession().getAttribute("CHECK_NUMBER_KEY");  
            if(checkNum != check_number_key && !checkNum.equals(check_number_key)){  
                result = "1";  
            }else{  
                result = "0";  
            }  
            HttpServletResponse response = WebContextUtil.getResponse();  
            response.setContentType("application/json;charset=UTF-8");  
            response.setHeader("Cache-Control", "no-cache");  
            PrintWriter out = response.getWriter();  
            out.write(result.toString());  
        } catch (IOException e) {  
            throw new RuntimeException("验证验证码出错", e);  
        }  
    }  
      
    /** 
     * 验证短信验证码是否正确 
     *  
     * @throws Exception 
     */  
    @Action(value = "UserAction_checkCode")  
    public void checkCode() throws Exception{  
        String result = "0";  
        /** 获取手动输入的手机短信验证码 */  
        String SmsCheckCode = WebContextUtil.getRequest().getParameter("SmsCheckCode");  
        /** 获取session中存放的手机短信验证码 */  
        String code = (String) WebContextUtil.getSession().getAttribute("code");  
        try {  
            if(SmsCheckCode != code && !SmsCheckCode.equals(code)){  
                result = "0";  
            }else{  
                result = "1";  
            }  
        } catch (Exception e) {  
            throw new RuntimeException("短信验证失败", e);  
        }  
        HttpServletResponse response = WebContextUtil.getResponse();  
        response.setContentType("application/json;charset=UTF-8");  
        response.setHeader("Cache-Control", "no-cache");  
        PrintWriter out = response.getWriter();  
        out.write(result.toString());  
    }  
      
    /** 
     * 验证手机短信是否发送成功 
     *  
     * @throws Exception 
     */  
    @Action(value = "UserAction_sms")  
    public void sms() throws Exception {  
        String result = "0";  
        /** 手机号码 */  
        String jbPhone = WebContextUtil.getRequest().getParameter("jbPhone");  
        /** 短信验证码 */  
        String code = WebContextUtil.getRequest().getParameter("code");  
        /** 短信验证码存入session(session的默认失效时间30分钟) */  
        WebContextUtil.getSession().setAttribute("code", code);  
        /** 如何初始化失败返回 */  
        if(!initClient()) {  
            return;  
        }  
        /** 单个手机号发送短信的方法的参数准备 */  
        // 手机号码  
        String mobilephone = jbPhone;  
        // 短信内容+随机生成的6位短信验证码  
        String content = "根据中国证监会举报中心委托，特向您发送此条短信。您的注册验证码为:" + code;  
        // 操作用户的ID  
        Integer operId = Integer.parseInt(Env.getInstance().getProperty("operId"));  
        // 定时发送的的发送时间(缺省为空，如果即时发送，填空)  
        String tosend_time = "";  
        // 应用系统的短信ID，用户查询该短信的状态报告(缺省为0，即不需查询短信的状态报告)  
        int sms_id = 0;  
        // 黑名单过滤(0：不需要黑名单过滤，1：需要黑名单过滤，缺省为0)  
        short backlist_filter = 0;  
        // 禁止语过滤(0：不需要禁止语过滤，1：需要禁止语过滤，缺省为0)  
        short fbdword_filter = 0;  
        // 优先级(值越大优先级越高，0：普通，1,：优先，2：最高，缺省为0)  
        short priority = 0;  
        // 短信有效时间(格式为：YYYY-MM-DD HH:mm:ss目前为空)  
        String valid_time = "";  
        /** 发送短信之前先统计一个已经发送的短信条数 */  
        int messageCount = countService.findAllRecord(mobilephone);  
        log.info("已发短信条数为：" +messageCount);  
        if(messageCount < 5){  
            /** 单个手机号发送短信 */  
            if (!sendMessage(mobilephone, content, operId, tosend_time, sms_id,  
                    backlist_filter, fbdword_filter, priority, valid_time)) {  
                result = "0";// 失败  
            } else {  
                result = "1";// 成功  
                /** 发送一条短信，记录一条短信记录，为了方便之后的统计短信发送次数 */  
                count.setPhone(mobilephone);// 手机号码  
                count.setCaptcha(code);// 短信验证码  
                count.setSendTime(CommonUtil.getNowDate());// 短信发送时间  
                if(count != null){  
                    countService.saveEntity(count);  
                    log.info("短信验证码发送记录保存成功!");  
                }  
            }  
        }else{  
            result = "2";//一个手机号码最多发送5条短信验证码  
            log.info("该手机号码今天发送验证码过多");  
        }  
        HttpServletResponse response = WebContextUtil.getResponse();  
        response.setContentType("application/json;charset=UTF-8");  
        response.setHeader("Cache-Control", "no-cache");  
        PrintWriter out = response.getWriter();  
        out.write(result.toString());  
    }  
      
    /** 
     * WebService客户端初始化 
     *  
     */  
    public static boolean initClient() {  
        /** 
         * 判断客户端是否已经初始化 
         */  
        if (!SmsWebClient.enable()) {  
            int ret = 0;  
            try {  
                ret = SmsWebClient.init(url, userName, passWord);  
                if (ret == -1 || !SmsWebClient.enable()) {  
                    log.info("短信平台接口初始化失败！");  
                    return false;  
                }  
                log.info("短信平台接口初始化成功！" + ret + "-----");  
            } catch (Exception ex) {  
                ex.printStackTrace();  
                log.info("短信平台接口初始化过程中异常！");  
            }  
        }  
        return true;  
    }  
      
    /** 
     * 单个手机号码发送 
     *  
     * @param mobilephone 
     *            手机号 
     * @param content 
     *            短信内容 
     * @param operId 
     *            操作用户的ID 
     * @param tosend_time 
     *            定时发送的发送时间 
     * @param sms_id 
     *            应用系统的短信ID 
     * @param backlist_filter 
     *            黑名单过滤 
     * @param fbdword_filter 
     *            禁止语过滤 
     * @param priority 
     *            优先级 
     * @param valid_time 
     *            短信有效时间 
     */  
    public static boolean sendMessage(java.lang.String mobilephone,  
            java.lang.String content, int operId, java.lang.String tosend_time,  
            int sms_id, short backlist_filter, short fbdword_filter,  
            short priority, java.lang.String valid_time) {  
        // 单个手机号码发送  
        try {  
            SmsReturnObj retObj = SmsWebClient.webSendMessage(mobilephone,  
                    content, operId, tosend_time, sms_id, backlist_filter,  
                    fbdword_filter, priority, valid_time);  
            if (retObj.getReturnCode() != 1) {  
                log.info("短信发送失败，原因为：" + retObj.getReturnMsg());  
                return false;  
            } else {  
                log.info("短信发送成功！返回结果为：" + retObj.getReturnMsg());  
                return true;  
            }  
        } catch (Exception ex) {  
            ex.printStackTrace();  
            log.info("短信发送过程发生异常!");  
        }  
        return true;  
    }  
      
      
}  